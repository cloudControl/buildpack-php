#!/usr/bin/env bash

# Copyright 2014 cloudControl GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# bin/compile <build-dir> <cache-dir>

set -eo pipefail

if [ "$#" -ne 2 ]; then
  echo "usage: bin/compile <build-dir> <cache-dir>"
  exit 1
fi

BIN_DIR=$(readlink -f $(dirname $0))
BP_DIR=$(readlink -f $(dirname $BIN_DIR))
BUILD_DIR=$1
CACHE_DIR=$2

export CACHE_DIR

APACHE_PATH="$BUILD_DIR/apache"
PHP_PATH="$BUILD_DIR/php"
PHP_CONFIGS_PATH="${PHP_PATH}/conf"

CODE_DIR=code
PROJECT_ROOT=$BUILD_DIR/$CODE_DIR

cd $BUILD_DIR

source $BIN_DIR/util/helper.sh
source $BIN_DIR/util/framework.sh
source $BIN_DIR/util/deprecated.sh

# Load buildpack environment
if [[ -f .buildpack/envrc ]]; then
  source .buildpack/envrc
fi

source $BIN_DIR/util/blackfire.sh
source $BIN_DIR/util/newrelic.sh

# move everything in BUILD_DIR except buildpack-specific files to PROJECT_ROOT
TMP=$(mktemp -d --tmpdir=.)
find . -mindepth 1 -maxdepth 1 -not -regex "./Procfile\|$TMP\|./.buildpack" -exec mv --target-directory="$TMP" '--' '{}' +
mv "$TMP" "$PROJECT_ROOT"
ln -s code www

APACHE_VERSION=httpd-2.2.31
echo "Using apache version ${APACHE_VERSION}" | indent_head
curl --silent --location "https://packages.${DOMAIN}/buildpack-php/${APACHE_VERSION}.tar.bz2" | tar jx

mkdir -p $APACHE_PATH/logs
mkdir -p $APACHE_PATH/conf/{share,local,user}
mkdir -p $PHP_PATH/{box,conf,logs}
mkdir -p $BUILD_DIR/.profile.d

cp $BP_DIR/support/boot.sh .


if [[ -f $PROJECT_ROOT/composer.json ]]; then
  # Install extensions
  exts=($($BP_DIR/bin/jq -r '.require | keys | map(select(startswith("ext-"))) | map(.[4:])|.[]' $PROJECT_ROOT/composer.json))

  if [[ ${exts[*]} =~ "blackfire" ]]; then
    install_blackfire
  fi

  # Caching: pre-install
  CACHED_DIRS=$($BP_DIR/bin/jq -e -r '.config["vendor-dir"]' $PROJECT_ROOT/composer.json) || CACHED_DIRS="vendor"

  mkdir -p $CACHE_DIR
  for dir in $CACHED_DIRS; do
    if [[ -e $PROJECT_ROOT/$dir ]]; then
      cp -R $PROJECT_ROOT/$dir $CACHE_DIR/ &> /dev/null || true
    fi

    mkdir -p $PROJECT_ROOT/$dir
    cp -R $CACHE_DIR/${dir##*/}/* $PROJECT_ROOT/$dir/ &> /dev/null || true
  done

  # Check for custom php version
  PHP_VERSION_NUMBER=$($BP_DIR/bin/jq --raw-output '.require | .["php-64bit"]' $PROJECT_ROOT/composer.json)

  if [[ "$PHP_VERSION_NUMBER" != "null" ]]; then
    echo "Found php version definition ${PHP_VERSION_NUMBER}" | indent_head

    RESPONSEFILE=/tmp/semverioresponse.txt
    status=$(curl -s -w %{http_code} "https://semverio.cloudcontrolled.com/php/resolve/$PHP_VERSION_NUMBER" -o $RESPONSEFILE)
    RESPONSE=$(cat $RESPONSEFILE)

    if [[ $status == 200 ]]; then
      PHP_VERSION=php-${RESPONSE}
      PHP_CONFIGS_PATH="/srv/www/${PHP_VERSION}/etc/conf.d"

      echo "Using php version ${PHP_VERSION}" | indent_head
      curl --silent --location "https://packages.${DOMAIN}/buildpack-php/${PHP_VERSION}.tar.bz2" | tar jx

      if [ ${#exts[@]} -eq 0 ]; then
        echo "No extensions found in composer.json, adding default extensions" | indent_head
        exts=(amqp bcmath bz2 calendar curl dba exif ftp gd gettext imagick intl mbstring mcrypt memcached mongo mssql mysql mysqli mysqlnd newrelic oauth pdo pdo_dblib pdo_mysql pdo_pgsql pdo_sqlite pgsql shmop soap sockets sqlite3 sysvmsg sysvsem sysvshm wddx xmlrpc xsl zip zlib)
      fi

      ln -s ${BUILD_DIR}/${PHP_VERSION} /srv/www/${PHP_VERSION}
      echo "unset PHP_INI_SCAN_DIR" > .profile.d/php.sh
      echo "export PATH=/srv/www/${PHP_VERSION}/sbin:/srv/www/${PHP_VERSION}/bin:\$PATH" >> .profile.d/php.sh
      source .profile.d/php.sh
      cp $BP_DIR/opt/.bashrc .

      mkdir bin
      cp $BP_DIR/bin/jq bin

      # Make /app/code available
      ln -s $BUILD_DIR/code /srv/www/www
      ln -s $BUILD_DIR/code /srv/www/code

      if [[ ${exts[*]} =~ "newrelic" ]]; then
        install_newrelic
      fi

      cp $BP_DIR/opt/boot.sh $BUILD_DIR/boot.sh

      for ext in "${exts[@]}"; do
        echo "Loading extension: ${ext}" | indent_head
        echo "extension = ${ext}.so" >> ${PHP_CONFIGS_PATH}/extensions.ini
      done

      if [ -d .buildpack/php/conf ]; then
        cp .buildpack/php/conf/*.ini ${PHP_CONFIGS_PATH}/
      fi
    else
      echo "WARN: Can not get ${PHP_VERSION_NUMBER} with error: $RESPONSE" | indent_head
      exit 1
    fi
  else
    echo "WARN: No php version found in composer.json. Falling back to legacy build." | indent_head
  fi

  # Install composer
  echo "Installing composer dependencies..." | indent_head
  if [[ ! -f $PROJECT_ROOT/composer.phar ]]; then
    curl --remote-name --silent --show-error https://getcomposer.org/installer
    php installer --quiet --install-dir=$PROJECT_ROOT

    # We do not delete the installer in the legacy build
    # as soon as we have only the custom build the if clause
    # can be deleted and the installer can be removed always
    if [[ -n "${PHP_VERSION}" ]]; then
      rm installer
    fi
  fi

  php $PROJECT_ROOT/composer.phar install $COMPOSER_INSTALL_ARGS -n -d $PROJECT_ROOT/ | indent

  # Clean the Image
  rm $PROJECT_ROOT/composer.phar

  if [[ -n "${PHP_VERSION}" ]]; then
    if [[ ${exts[*]} =~ "newrelic" ]]; then
      finalize_newrelic
    fi
  fi

  # Caching: post-install
  for dir in $CACHED_DIRS; do
    rm -rf $CACHE_DIR/${dir##*/}
    cp -R $PROJECT_ROOT/$dir $CACHE_DIR/
  done
fi

if [[ -z "${PHP_VERSION}" ]]; then
  check_ccconfig
fi

framework_detection

if [[ -z "${PHP_VERSION}" ]]; then
  check_luigi
fi

# set default values if not defined in user custom configuration files
if ! grep -q -s "DocumentRoot" .buildpack/apache/conf/*.conf ; then
  DOCUMENT_ROOT="/app/code/$WEBCONTENT"
  echo "DocumentRoot \"$DOCUMENT_ROOT\"" > $APACHE_PATH/conf/share/documentroot.conf
  cat >> $APACHE_PATH/conf/share/documentroot.conf <<EOF
<Directory "$DOCUMENT_ROOT">
  AllowOverride All
  Options SymlinksIfOwnerMatch
  Order Deny,Allow
  Allow from All
  DirectoryIndex index.php index.html index.htm
</Directory>
EOF
fi

if [ -f .buildpack/php-fpm/conf/php-fpm.ini ]; then
  php $BP_DIR/support/merge_conf.php $BP_DIR/conf/php-fpm.ini .buildpack/php-fpm/conf/php-fpm.ini $PHP_PATH/php-fpm.ini
else
  cp $BP_DIR/conf/php-fpm.ini $PHP_PATH
fi

if [[ -z "${PHP_VERSION}" ]]; then
  cp $BP_DIR/conf/php.ini ${PHP_CONFIGS_PATH}/010_php.ini

  copy_default_config

  if [ -d .buildpack/php/conf ]; then
    cp .buildpack/php/conf/*.ini ${PHP_CONFIGS_PATH}/
  fi
fi

cp $BP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $BP_DIR/conf/httpd-old.conf $APACHE_PATH/conf
cp -r $BP_DIR/conf/mods-enabled $APACHE_PATH/conf
if [ -d .buildpack/apache/conf ]; then
  cp .buildpack/apache/conf/* $APACHE_PATH/conf/user
fi

if [[ -z "${PHP_VERSION}" ]]; then
  configure_apc
fi
